// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: movie_queries.sql

package repositories

import (
	"context"
)

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovies = `-- name: GetMovies :many
SELECT id, movie_name FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(&i.ID, &i.MovieName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMovie = `-- name: InsertMovie :one
INSERT INTO movies ( movie_name ) VALUES($1) RETURNING id
`

func (q *Queries) InsertMovie(ctx context.Context, movieName string) (int64, error) {
	row := q.db.QueryRow(ctx, insertMovie, movieName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movies SET movie_name = $1 AND id = $2
`

type UpdateMovieParams struct {
	MovieName string
	ID        int64
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.Exec(ctx, updateMovie, arg.MovieName, arg.ID)
	return err
}
