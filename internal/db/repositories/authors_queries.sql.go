// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: authors_queries.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const deleteDeleteAuthor = `-- name: DeleteDeleteAuthor :exec
DELETE FROM
    authors
WHERE
    id = $1
`

func (q *Queries) DeleteDeleteAuthor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDeleteAuthor, id)
	return err
}

const getAuthors = `-- name: GetAuthors :many
SELECT
    id, first_name, last_name
from
    authors
`

func (q *Queries) GetAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuthor = `-- name: InsertAuthor :one
INSERT INTO
    authors (first_name, last_name)
VALUES
    ($1, $2) RETURNING id, first_name, last_name
`

type InsertAuthorParams struct {
	FirstName string
	LastName  string
}

func (q *Queries) InsertAuthor(ctx context.Context, arg InsertAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, insertAuthor, arg.FirstName, arg.LastName)
	var i Author
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE
    authors
SET
    first_name = $1,
    last_name = $2
WHERE
    id = $3
`

type UpdateAuthorParams struct {
	FirstName string
	LastName  string
	ID        uuid.UUID
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor, arg.FirstName, arg.LastName, arg.ID)
	return err
}
